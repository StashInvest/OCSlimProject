##############
# PROPERTIES #
##############

MY_PATH=$(dirname $0)
BUNDLE_DIR=$(dirname "$(readlink "${BASH_SOURCE[0]}")")
ACTION=LAUNCH
CURL_CONNECTION_REFUSED_CODE=7

#################
# CONFIGURATION #
#################

FITNESSE_PORT=8080
FITNESSE_EXECUTABLE_PATH=${BUNDLE_DIR}/fitnesse-standalone.jar
FITNESSE_ROOT_CONTENT_FILE=FitnesseRoot/content.txt
FITNESSE_URL=http:"//localhost:${FITNESSE_PORT}/"
FITNESSE_TEST_REPORT_NAME=${BUNDLE_DIR}Fitnesse-JUnit-Test-Report.xml

####################################
# Command Line Argument Processing #
####################################

while [ "$1" != "" ]; do
    case $1 in
	
		-p | --port )			shift
								FITNESSE_PORT=$1
                                ;;
								
		-x | --shutdown)		shift
								ACTION=SHUTDOWN
                                ;;
                                
        -t | --test )           shift
        						ACTION=TEST

		esac
		shift
done

###############
# Subroutines #
###############

function java_check {
	if ! type java &> /dev/null ;  then
		echo "Java (JRE) not found"
    	echo "Download the latest version of Java?"
		select yn in "Get Java for Mac" "Not Now"; do
			case $yn in 
				"Get Java for Mac" ) open "http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html"; break;;
				"Not Now" ) break;;
			esac
		done
		exit 0
	fi
}

function fitnesse_shutdown {
	curl --silent $FITNESSE_URL?shutdown > /dev/null
	lsof -n -i4TCP:$FITNESSE_PORT | awk ' { print $2 }' | sed -n 2p | xargs kill -9
}

function fitnesse_check {

	if [ ! -f "${FITNESSE_EXECUTABLE_PATH}" ]; then
		echo "Fitnesse-Standalone.jar missing!"
    	echo "Download the latest fitnesse-standlalone.jar to the current directory from Fitnesse.org"
		select yn in "Goto http://fitnesse.org" "Not Now"; do
			case $yn in 
				"Goto http://fitnesse.org" ) open "http://fitnesse.org"; break;;
				"Not Now" ) break;;
			esac
		done
		popd 2>&1 > /dev/null
		exit 0
	fi

}

function fitnesse_start {
	echo "# Fitnesse Info     "
	echo "# Jar=${FITNESSE_EXECUTABLE_PATH}"
	echo "# Port=${FITNESSE_PORT}"
	echo "# Root=."
	java -jar ${FITNESSE_EXECUTABLE_PATH} -e 0 -p ${FITNESSE_PORT} &
}

function fitnesse_wait {
	result=$CURL_CONNECTION_REFUSED_CODE
	while [ $result -eq $CURL_CONNECTION_REFUSED_CODE ] 
	do
		sleep 0.5
		curl -s "http://localhost:${FITNESSE_PORT}" > /dev/null 2>&1 
		result=$?
	done
	echo ""
}

function fitnesse_setup {
	if [ ! -f "${FITNESSE_ROOT_CONTENT_FILE}" ]; then
		echo "''Auto Generated By !-"OCSlimProject"-! Do Not Modify This Page''" > $FITNESSE_ROOT_CONTENT_FILE
		echo "!define TEST_SYSTEM {slim}" >> $FITNESSE_ROOT_CONTENT_FILE
		echo "!define TEST_RUNNER {!-./OCSlimProjectTestRunner.sh-!}" >> $FITNESSE_ROOT_CONTENT_FILE
		echo "!define SLIM_VERSION {0.0}" >> $FITNESSE_ROOT_CONTENT_FILE
		echo "!define COMMAND_PATTERN {%m}" >> $FITNESSE_ROOT_CONTENT_FILE
		
		cp -r 
	fi
}


function fitnesse_main {

	pushd $MY_PATH 2>&1 > /dev/null
	
	# Check Java Exists	
	java_check
	# Check Fitnesse Exists
	fitnesse_check	
	# Enable Job Control
	set -o monitor
	# LAUNCH Fitnesse in the background, wait for it to respond, then open in a browser.
	fitnesse_run
	# Return Foreground control to Fitnesse
	
	popd 2>&1 > /dev/null
	
}

function fitnesse_run {
	fitnesse_start
	fitnesse_wait
	fitnesse_setup
}

function fitnesse_launch_in_browser {
	fitnesse_main
	open $FITNESSE_URL
}

function fitnesse_generate_test_suite_report {
	fitnesse_main
	curl $FITNESSE_URL\?suite\&format\=junit > $FITNESSE_TEST_REPORT_NAME
	fitnesse_shutdown
}


########
# Main #
########

function main {

	case "$ACTION" in

	LAUNCH)  echo  "Launching Fitnesse"
		fitnesse_launch_in_browser
		echo  "Use --shutdown to stop Fitnesse"
		;;
		
	SHUTDOWN)  echo "Shutting Down Fitnesse on Port $FITNESSE_PORT"
		fitnesse_shutdown
		;;
		
	TEST)  echo  "Generating Fitnesse Suite Report"
		fitnesse_generate_test_suite_report
		echo  "Fitnesse Suite Report Generated"
		;;
	esac
	
}

main
