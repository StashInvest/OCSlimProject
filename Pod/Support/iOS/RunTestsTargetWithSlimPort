MYPATH=$(dirname $0)
source ${MYPATH}/env.sh
APP_PATH=${TARGET_BUILD_DIR}/${EXECUTABLE_FOLDER_PATH}
DEPLOYMENT_TARGET_VALUE=$( echo "$DEPLOYMENT_TARGET_SUGGESTED_VALUES" | rev | cut -d " " -f1 | rev )
SLIM_PORT=$1
APP_IDENTIFIER=$(/usr/libexec/PlistBuddy $MYPATH/../Info.plist -c "Print CFBundleIdentifier")
DEVICE_TYPE=iPhone
NOTBOOTED_CODE=158
APPCONTAINER_NOTFOUND_CODE=2

#echo 'Running Test Target "'$FULL_PRODUCT_NAME'" with Slim Port "'$SLIM_PORT'"'
#echo 'Simulator Device "'$DEVICE_TYPE'", deployment Target "'$DEPLOYMENT_TARGET_VALUE'"'

echo "Application Identifier: $APP_IDENTIFIER"

get_app_container() {
	return $(xcrun simctl get_app_container booted $APP_IDENTIFIER > /dev/null)
}

install_app() {
	echo "Installing App on the currently booted device (Path: $APP_PATH)" 
	xcrun simctl install booted $APP_PATH
}

getDeviceIdentifier() {
	local device_identifier=$(xcrun instruments -s | grep "$DEVICE_TYPE" | grep -v "Apple Watch" | grep "9.3" | cut -d "[" -f2 | cut -d "]" -f1 | tail -n 1)
	if [ -z "$device_identifier" ]; then
		echo "Couldn't find a $DEVICE_TYPE device to boot, aborting"
		exit
	fi
	echo $device_identifier
}


wait_for_simulator() {
	echo 'Waiting for simulator'
	get_app_container
	while [ $? -eq $NOTBOOTED_CODE ] 
	do
		sleep 0.2
		get_app_container
	done
}

get_booted_devicetypeid() {
	local BOOTED_DEVICE_NAME=$(xcrun simctl list devices | grep "Booted" | cut -d "(" -f1)
	local BOOTED_DEVICETYPE_ID=$(xcrun simctl list devicetypes | grep "^$BOOTED_DEVICE_NAME (com.apple" | cut -d "(" -f2 | cut -d ")" -f1)
	echo "$BOOTED_DEVICE_NAME, $BOOTED_DEVICETYPE_ID"
	echo "$BOOTED_DEVICETYPE_ID, $DEPLOYMENT_TARGET_VALUE"
}

boot_device() {
	local device_identifier=$(getDeviceIdentifier)
	echo "Booting Simulator (Device Type=$DEVICE_TYPE)"
	open -a "Simulator" --args -CurrentDeviceUDID "$device_identifier"
	echo "$(xcrun simctl list | grep $device_identifier | tail -n 1 )"
	wait_for_simulator
}

launch_app() {
	echo "Launching App on Booted Device ( $(xcrun simctl launch booted $APP_IDENTIFIER $SLIM_PORT) (Port:$SLIM_PORT) )"
}

run_app() {
	install_app
	launch_app
}

main() {

	
	get_app_container

	case $? in
		$APPCONTAINER_NOTFOUND_CODE)
		echo "Some Device Currently Booted, But App Not Installed"
		run_app
		;;

		$NOTBOOTED_CODE)
		boot_device
		run_app
		;;
	
		0)
		echo "Detected the App on the currently booted device. Will re-install (ensuring we're running latest build)"
		run_app
		;;
	
		*)
		echo "unrecognised exit code, aborted."
		;;
	esac

	exit

}

get_booted_devicetypeid

#GETS THE NAME OF THE CURRENTLY BOOTED DEVICE
#xcrun simctl list devices | grep "Booted" | cut -d "(" -f1

#GETS THE MOST MODERN DEVICE NAME FOR A GIVEN DEVICE FAMILY
#xcrun simctl list devicetypes | grep "iPhone" | tail -n1 | cut -d "(" -f2 | cut -d ")" -f1

#GETS THE DEVICE TYPE IDENTIFIER FOR A GIVEN DEVICE NAME
#xcrun simctl list devicetypes | grep "^iPhone 6 (com.apple" | cut -d "(" -f2 | cut -d ")" -f1

